# Check if a user with email and password exists in the database
SELECT EXISTS(SELECT * FROM Users WHERE email=? AND password=?)

# register a user into the database
INSERT INTO Users (email, title, forenames, surname, university, password) 
	VALUES ('raivo@gmail.com', 'DR', 'Raivo Eli', 'Koot', 'Sheffield Uni', 'password')
	
# change password
UPDATE Users 
SET 
    password = 'hacked'
WHERE
    email = 'maxime.fontana@orange.fr'
	AND
	password = 'bonjour'
	
# create a journal entry
INSERT INTO Journals (ISSN, name) 
	VALUES ('ABCDHSJKSD', 'Journal of Computer Science')
	
# check if journal with issn or name already exists
SELECT EXISTS(
	SELECT * FROM Journals WHERE 
		ISSN = ? OR
		name = ?
	)
	
# create editorship entry
INSERT INTO JournalEditors (ISSN, email, isChief) 
	VALUES ('ABCDHSJKSD', 'victor.hugo@gmail.com', true)
	
# check if a user has an editorship of a journal
SELECT isChief FROM JournalEditors WHERE
                    tISSN = ? AND
                    temail = ?
					
# Create an article with default isFinal=false and isAccepted=false
INSERT INTO Articles (title, abstract, content, ISSN) VALUES
	('Mockingbird', 'About birds', 'Once upon a time...', 'ISSN');
	
# Create authorship
INSERT INTO Authorships (email, articleID, isMain) VALUES
	(?,?,?)
	
# Get all Journals
SELECT * FROM Journals

# Create a new volume for a journal with the next possible volume number
BEGIN;
SELECT @id := IFNULL(MAX(volumeNum),0) + 1 FROM Volumes WHERE issn = 'no' FOR UPDATE;
INSERT INTO Volumes
     (volumeNum, issn, publicationYear)
     VALUES
     (@id, 'no', 2015);
COMMIT;

# Get all Volumes of a Journal
SELECT * FROM Volumes WHERE ISSN='issn'

# Create a new Edition of a volume with the next possible edition number
BEGIN;
SELECT @editionNum := IFNULL(MAX(editionNum),0) + 1 FROM Editions WHERE issn = 'issn' AND volumeNum = 1 FOR UPDATE;
INSERT INTO Editions
     (editionNum, publicationMonth, volumeNum, ISSN)
     VALUES
     (@editionNum, 11, 1, 'issn');
COMMIT;

# Get next edition num for a volume of a journal
SELECT IFNULL(MAX(editionNum),0) + 1 FROM Editions WHERE issn = '01010000' AND volumeNum = 1;

# Promote an editor to chief
UPDATE JournalEditors SET isChief=1 WHERE
	email = 'max@gmail.com' AND ISSN = '99990000'
	
# Select all articles of a user
Select Articles.* FROM Articles, Authorships
WHERE Articles.articleID = Authorships.articleID AND
	Authorships.email = 'raivo@gmail.com'
	
# Select all articles of a user that do not have 3 contributions yet
SELECT Articles.articleID, title, abstract, content, ISSN, COUNT(Reviews.articleOfReviewerID) as contributions FROM (Articles, Authorships)
LEFT JOIN Reviews on Reviews.articleOfReviewerID = Articles.articleID
WHERE 
	Articles.articleID = Authorships.articleID AND 
	Authorships.email = 'raivo@gmail.com'
	
GROUP BY Articles.articleID
HAVING contributions < 3;

# Insert an empty review
INSERT INTO Reviews (submissionID, articleOfReviewerID, reviewerEmail) VALUES
	(3, 4, 'raivo@gmail.com')

# Get all of a users reviews that still need to be submitted
SELECT * FROM Reviews WHERE
reviewerEmail = 'raivo@gmail.com' AND
summary is null AND verdict is null and isFinal = 0

# Get a list of emails that the given user is affiliated with.
# This is all users that is an author of the same article
# or is an editor of the same journal
SELECT DISTINCT email FROM Authorships WHERE articleID in (SELECT articleID FROM Authorships WHERE email='raivo@gmail.com')
union
SELECT DISTINCT email FROM JournalEditors WHERE issn in (SELECT issn FROM JournalEditors WHERE email='raivo@gmail.com');

# Select all articles that have less than three reviews and are not authored
# by anyone in a given email list
SELECT Articles.articleID, title, abstract, content, ISSN, COUNT(Reviews.submissionID) as reviews FROM (Articles)
LEFT JOIN Reviews on Reviews.submissionID = Articles.articleID
INNER JOIN Authorships on Authorships.articleID = Articles.articleID

WHERE Authorships.email not in ('raivo@gmail.com')

GROUP BY Articles.articleID
HAVING reviews < 3;

# Select all articles that have less than 3 reviews and
# are not authored by anyone affiliated to the given user
SELECT Articles.articleID, title, abstract, content, ISSN, COUNT(Reviews.submissionID) as reviews FROM (Articles)
LEFT JOIN Reviews on Reviews.submissionID = Articles.articleID
INNER JOIN Authorships on Authorships.articleID = Articles.articleID

WHERE Authorships.email not in
	(SELECT DISTINCT email FROM Authorships WHERE articleID in (SELECT articleID FROM Authorships WHERE email='raivo@gmail.com')
	union
	SELECT DISTINCT email FROM JournalEditors WHERE issn in (SELECT issn FROM JournalEditors WHERE email='raivo@gmail.com'))

GROUP BY Articles.articleID
HAVING reviews < 10;

# GET all your articles and all their status information
SELECT Articles.articleID, title, isAccepted, Articles.isFinal, COUNT(r1.submissionID) as reviewCount, 
	COUNT(r2.articleOfReviewerID) as contributionCount, SUM(r1.isFinal) as finalReviews, SUM(r1.hasResponse) as reviewResponses 
	FROM (Articles)
	
LEFT JOIN Reviews r1 on r1.submissionID = Articles.articleID
LEFT JOIN Reviews r2 on r2.articleOfReviewerID = Articles.articleID
INNER JOIN Authorships on Authorships.articleID = Articles.articleID

WHERE Authorships.email in ('raivo@gmail.com')
GROUP BY Articles.articleID;


# Update a review
UPDATE Reviews SET summary='good stuff', verdict='champion' WHERE
	reviewID = 1

# Insert a critique
INSERT INTO Critiques (reviewID, description) VALUES
	(1, 'Bad bad article no goody')
	
# As a reviewer, get a list of articles for which you need to give a final verdict